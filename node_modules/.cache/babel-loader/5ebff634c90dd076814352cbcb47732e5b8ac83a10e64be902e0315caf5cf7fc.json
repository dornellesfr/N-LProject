{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport windowExists from '../../helpers/window-exists';\nimport defaultTheme from '../../theme/default';\nexport const ThemeContext = createContext({\n  theme: defaultTheme\n});\nexport const ThemeProvider = _ref => {\n  let {\n    children,\n    value\n  } = _ref;\n  return _jsx(ThemeContext.Provider, {\n    value: value,\n    children: children\n  });\n};\nexport function useTheme() {\n  return useContext(ThemeContext);\n}\nexport const useThemeMode = usePreferences => {\n  const [mode, setModeState] = useState('light');\n  const savePreference = mode => localStorage.setItem('theme', mode);\n  const getPreference = () => localStorage.getItem('theme') || getPrefersColorScheme();\n  const userPreferenceIsDark = () => window.matchMedia?.('(prefers-color-scheme: dark)').matches;\n  const getPrefersColorScheme = () => userPreferenceIsDark() ? 'dark' : 'light';\n  const toggleMode = () => {\n    const newMode = mode === 'dark' ? 'light' : 'dark';\n    setMode(newMode);\n    setModeState(newMode);\n  };\n  const setMode = mode => {\n    savePreference(mode);\n    if (!windowExists()) {\n      return;\n    }\n    if (mode === 'dark') {\n      document.documentElement.classList.add('dark');\n      return;\n    }\n    document.documentElement.classList.remove('dark');\n  };\n  if (usePreferences) {\n    useEffect(() => setModeState(getPreference()), []);\n    useEffect(() => setMode(mode), [mode]);\n  }\n  return [mode, setModeState, toggleMode];\n};","map":{"version":3,"names":["jsx","_jsx","createContext","useContext","useEffect","useState","windowExists","defaultTheme","ThemeContext","theme","ThemeProvider","_ref","children","value","Provider","useTheme","useThemeMode","usePreferences","mode","setModeState","savePreference","localStorage","setItem","getPreference","getItem","getPrefersColorScheme","userPreferenceIsDark","window","matchMedia","matches","toggleMode","newMode","setMode","document","documentElement","classList","add","remove"],"sources":["/home/fernando/Documentos/projetos-pessoais/N-LProject/node_modules/flowbite-react/lib/esm/components/Flowbite/ThemeContext.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport windowExists from '../../helpers/window-exists';\nimport defaultTheme from '../../theme/default';\nexport const ThemeContext = createContext({\n    theme: defaultTheme,\n});\nexport const ThemeProvider = ({ children, value }) => {\n    return _jsx(ThemeContext.Provider, { value: value, children: children });\n};\nexport function useTheme() {\n    return useContext(ThemeContext);\n}\nexport const useThemeMode = (usePreferences) => {\n    const [mode, setModeState] = useState('light');\n    const savePreference = (mode) => localStorage.setItem('theme', mode);\n    const getPreference = () => localStorage.getItem('theme') || getPrefersColorScheme();\n    const userPreferenceIsDark = () => window.matchMedia?.('(prefers-color-scheme: dark)').matches;\n    const getPrefersColorScheme = () => (userPreferenceIsDark() ? 'dark' : 'light');\n    const toggleMode = () => {\n        const newMode = mode === 'dark' ? 'light' : 'dark';\n        setMode(newMode);\n        setModeState(newMode);\n    };\n    const setMode = (mode) => {\n        savePreference(mode);\n        if (!windowExists()) {\n            return;\n        }\n        if (mode === 'dark') {\n            document.documentElement.classList.add('dark');\n            return;\n        }\n        document.documentElement.classList.remove('dark');\n    };\n    if (usePreferences) {\n        useEffect(() => setModeState(getPreference()), []);\n        useEffect(() => setMode(mode), [mode]);\n    }\n    return [mode, setModeState, toggleMode];\n};\n"],"mappings":"AAAA,SAASA,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,SAASC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACtE,OAAOC,YAAY,MAAM,6BAA6B;AACtD,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,OAAO,MAAMC,YAAY,GAAGN,aAAa,CAAC;EACtCO,KAAK,EAAEF;AACX,CAAC,CAAC;AACF,OAAO,MAAMG,aAAa,GAAGC,IAAA,IAAyB;EAAA,IAAxB;IAAEC,QAAQ;IAAEC;EAAM,CAAC,GAAAF,IAAA;EAC7C,OAAOV,IAAI,CAACO,YAAY,CAACM,QAAQ,EAAE;IAAED,KAAK,EAAEA,KAAK;IAAED,QAAQ,EAAEA;EAAS,CAAC,CAAC;AAC5E,CAAC;AACD,OAAO,SAASG,QAAQA,CAAA,EAAG;EACvB,OAAOZ,UAAU,CAACK,YAAY,CAAC;AACnC;AACA,OAAO,MAAMQ,YAAY,GAAIC,cAAc,IAAK;EAC5C,MAAM,CAACC,IAAI,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,OAAO,CAAC;EAC9C,MAAMe,cAAc,GAAIF,IAAI,IAAKG,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,IAAI,CAAC;EACpE,MAAMK,aAAa,GAAGA,CAAA,KAAMF,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC,IAAIC,qBAAqB,EAAE;EACpF,MAAMC,oBAAoB,GAAGA,CAAA,KAAMC,MAAM,CAACC,UAAU,GAAG,8BAA8B,CAAC,CAACC,OAAO;EAC9F,MAAMJ,qBAAqB,GAAGA,CAAA,KAAOC,oBAAoB,EAAE,GAAG,MAAM,GAAG,OAAQ;EAC/E,MAAMI,UAAU,GAAGA,CAAA,KAAM;IACrB,MAAMC,OAAO,GAAGb,IAAI,KAAK,MAAM,GAAG,OAAO,GAAG,MAAM;IAClDc,OAAO,CAACD,OAAO,CAAC;IAChBZ,YAAY,CAACY,OAAO,CAAC;EACzB,CAAC;EACD,MAAMC,OAAO,GAAId,IAAI,IAAK;IACtBE,cAAc,CAACF,IAAI,CAAC;IACpB,IAAI,CAACZ,YAAY,EAAE,EAAE;MACjB;IACJ;IACA,IAAIY,IAAI,KAAK,MAAM,EAAE;MACjBe,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;MAC9C;IACJ;IACAH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;EACrD,CAAC;EACD,IAAIpB,cAAc,EAAE;IAChBb,SAAS,CAAC,MAAMe,YAAY,CAACI,aAAa,EAAE,CAAC,EAAE,EAAE,CAAC;IAClDnB,SAAS,CAAC,MAAM4B,OAAO,CAACd,IAAI,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAC1C;EACA,OAAO,CAACA,IAAI,EAAEC,YAAY,EAAEW,UAAU,CAAC;AAC3C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}